version: "3"
services:
  postgres:
    image: postgres:17-alpine
    container_name: 'postgres'
    ports:
      - 5432:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: user
      POSTGRES_HOST_AUTH_METHOD: trust
  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
  redis:
    image: redis:6.2.5-alpine
  elasticsearch:
    image: elasticsearch:8.8.0
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
  ai_app:
    container_name: python_ai
    profiles:
      - ""
      - python
    build: 
      context: ./apps/python
      dockerfile: dev.Dockerfile
    volumes:
      - ./apps/frontend:/app
    ports:
      - 8000:8000 

  backend_app:
    container_name: backend_app
    profiles:
      - ""
      - backend
    build:
      context: ./apps/backend
      dockerfile: dev.Dockerfile
    env_file: apps/backend/.env
    volumes:
      - ./apps/backend:/app
      - /app/apps/backend/node_modules
    ports:
      - 4000:4000 
    depends_on:
      - postgres
      - rabbitmq
      - redis

  frontend_app:
    container_name: frontend_app
    profiles:
      - ""
      - frontend
    build:
      context: ./apps/frontend
      dockerfile: dev.Dockerfile
    env_file: apps/frontend/.env
    volumes:
      - ./apps/frontend:/app
      - /app/apps/frontend/node_modules
      - /app/apps/frontend/.next
    ports:
      - 3000:3000
    depends_on:
      - backend_app