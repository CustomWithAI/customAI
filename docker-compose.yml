version: "3"
services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    ports:
      - 5432:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: user
      POSTGRES_PASSWORD: your_postgres_password
      POSTGRES_HOST_AUTH_METHOD: trust

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  redis:
    container_name: redis
    ports:
      - 6379:6379
    image: redis:6.2.5-alpine

  # elasticsearch:
  #   container_name: elasticsearch
  #   image: elasticsearch:8.16.2
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   labels:
  #     co.elastic.logs/json.overwrite_keys: true 
  #     co.elastic.logs/json.add_error_key: true 
  #     co.elastic.logs/json.expand_keys: true
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=true

  # kibana:
  #   image: kibana:8.16.2
  #   volumes:
  #     - ./kibana.yml:/usr/share/kibana/config/kibana.yml
  #   ports:
  #     - 5601:5601

  localstack:
    container_name: localstack
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - DEBUG=${DEBUG:-0}
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./localstack}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  aws-cli:
    image: amazon/aws-cli
    depends_on:
      localstack:
        condition: service_healthy
    volumes:
      - ./images:/aws
      - ./upload-images.sh:/aws/upload-images.sh
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    entrypoint: /bin/sh
    command: -c "sh /aws/upload-images.sh"

  backend_app:
    container_name: backend_app
    profiles:
      - ""
      - backend
    build:
      context: ./apps/backend
      dockerfile: dev.Dockerfile
    env_file: apps/backend/.env
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    ports:
      - 4000:4000 
    depends_on:
      - localstack
      - postgres
      - rabbitmq
      - redis

  worker:
    container_name: worker
    profiles:
      - ""
      - worker
    build:
      context: ./apps/backend
      dockerfile: dev.Dockerfile
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    command: ["bun", "run", "--watch", "src/workers/trainingWorker.ts"]
    env_file: apps/backend/.env
    depends_on:
      - backend_app
      - localstack
      - postgres
      - rabbitmq
      - redis

  frontend_app:
    container_name: frontend_app
    profiles:
      - ""
      - frontend
    build:
      context: ./apps/frontend
      dockerfile: dev.Dockerfile
    env_file: apps/frontend/.env
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    ports:
      - 3000:3000
    depends_on:
      - backend_app

  ai-service:
    container_name: ai_service
    build:
      context: ./apps/ai-service
      dockerfile: dev.Dockerfile
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
