version: "3.9"

services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker.network=traefik"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # networks:
    #   - traefik
  
  postgres:
    image: postgres:17-alpine
    container_name: postgres-prod
    ports:
      - 5432:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: user
      POSTGRES_PASSWORD: your_postgres_password
      POSTGRES_HOST_AUTH_METHOD: trust
    # networks:
    #   - backend

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq-prod
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks:
    #   - backend

  redis:
    image: redis:6.2.5-alpine
    container_name: redis-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks:
    #   - backend

  localstack:
    container_name: localstack-prod
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - DEBUG=${DEBUG:-0}
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./localstack}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    # networks:
    #   - backend

  aws-cli:
    image: amazon/aws-cli
    container_name: aws-cli-prod
    depends_on:
      localstack:
        condition: service_healthy
    volumes:
      - ./images:/aws
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    entrypoint: /bin/sh
    command: -c "sh /aws/upload-images.sh"
    # networks:
    #   - backend

  ai-service:
    container_name: ai-service-prod
    profiles: ["", "python"]
    build:
      context: ./apps/ai-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    # networks:
    #   - backend
    #   - monitoring
    labels:
      - "logging=enabled"

  backend-app:
    container_name: backend-prod
    profiles: ["backend", ""]
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    env_file: apps/backend/.env
    environment:
      - LOKI_HOST=http://loki:3100
      - NODE_ENV=production
    ports:
      - 4000:4000
    # networks:
    #   - backend
    #   - traefik
    #   - monitoring
    labels:
      - "traefik.http.services.backend-app.loadbalancer.server.port=4000"
      - "traefik.http.routers.backend-app.rule=Host(`api.customai.cloud`)"
      - "logging=enabled"

  # backend-app:
  #   container_name: backend-app
  #   profiles:
  #     - ""
  #     - backend
  #   build:
  #     context: ./apps/backend
  #     dockerfile: dev.Dockerfile
  #   env_file: apps/backend/.env
  #   volumes:
  #     - ./apps/backend:/app
  #     - /app/node_modules
  #   ports:
  #     - 4000:4000 
  #   depends_on:
  #     - localstack
  #     - postgres
  #     - rabbitmq
  #     - redis
  
  queue-worker:
    container_name: queue-worker-prod
    profiles: ["worker", ""]
    build:
      context: ./apps/backend
      dockerfile: queue.Dockerfile
    env_file: apps/backend/.env
    # networks:
    #   - backend
    depends_on:
      - backend-app
      - localstack
      - postgres
      - rabbitmq
  
  log-worker:
    container_name: log-worker-prod
    profiles: ["worker", ""]
    build:
      context: ./apps/backend
      dockerfile: log.Dockerfile
    env_file: apps/backend/.env
    # networks:
    #   - backend
    depends_on:
      - backend-app
      - postgres
      - redis
    
  frontend-app:
    container_name: frontend-app
    profiles:
      - ""
      - frontend
    build:
      context: ./apps/frontend
      dockerfile: dev.Dockerfile
    env_file: apps/frontend/.env
    ports:
      - 3000:3000
    # networks:
    #   - frontend
    #   - traefik
    #   - monitoring
    depends_on:
      - backend-app

  # frontend-app:
  #   container_name: frontend-prod
  #   profiles: ["", "frontend"]
  #   build:
  #     context: ./apps/frontend
  #     dockerfile: Dockerfile
  #   env_file: apps/frontend/.env
  #   environment:
  #     - LOKI_HOST=http://loki:3100
  #     - NODE_ENV=production
  #   volumes:
  #     - ./apps/frontend:/app
  #     - /app/apps/frontend/node_modules
  #     - /app/apps/frontend/.next
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - frontend
  #     - traefik
  #     - monitoring
  #   depends_on:
  #     - backend-app
  #   labels:
  #     - "traefik.http.routers.frontend_app.rule=Host(`customai.cloud`)"
  #     - "traefik.http.services.frontend_app.loadbalancer.server.port=3000"
  #     - "logging=enabled"

  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/config.yml
      - ./monitoring/wal:/wal
    # networks:
    #   - monitoring

  # promtail:
  #   image: grafana/promtail:2.9.4
  #   container_name: promtail
  #   volumes:
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/log:/var/log
  #     - /etc/machine-id:/etc/machine-id:ro
  #     - /etc/hostname:/etc/hostname:ro
  #     - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
  #   command: -config.file=/etc/promtail/config.yml
  #   depends_on:
  #     - loki
  #   networks:
  #     - monitoring

  grafana:
    image: grafana/grafana:10.3.1
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - loki
    # networks:
    #   - monitoring
    #   - traefik
    labels:
      - "traefik.http.routers.grafana.rule=Host(`monitoring.customai.cloud`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

volumes:
  grafana-data:

# networks:
#   traefik:
#     driver: bridge
#   backend:
#     driver: bridge
#   frontend:
#     driver: bridge
#   monitoring:
#     driver: bridge