services:
  reverse-proxy:
    image: traefik:v3.1
    command: 
      - "--api.insecure=true"
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker.network=traefik"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - 443:443
      - "8080:8080" # Optional: Enable Dashboard (do not use in production)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres_prod:
    image: postgres:17-alpine
    container_name: postgres-prod
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=user
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_PASSWORD=your_postgres_password
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  rabbitmq_prod:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq-prod
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis_prod:
    image: redis:6.2.5-alpine
    container_name: redis-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  localstack_prod:
    container_name: localstack_prod
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - DEBUG=${DEBUG:-0}
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./localstack}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  aws-cli_prod:
    image: amazon/aws-cli
    container_name: aws-cli_prod
    depends_on:
      localstack_prod:
        condition: service_healthy
    volumes:
      - ./images:/aws
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    entrypoint: /bin/sh
    command: -c "sh /aws/upload-images.sh"

  ai-service_prod:
    container_name: ai_service_prod
    profiles:
      - ""
      - python
    build:
      context: ./apps/ai-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/ai-service:/app
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  backend_app_prod:
    container_name: backend_prod
    profiles:
      - backend
      - ""
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    env_file: apps/backend/.env
    ports:
      - 4000:4000 
    # depends_on:
    #   postgres_prod:
    #     condition: service_healthy
    #   rabbitmq_prod:
    #     condition: service_healthy
    #   redis_prod:
    #     condition: service_healthy

  frontend_app_prod:
    container_name: frontend_prod
    profiles:
      - ""
      - frontend
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    env_file: apps/frontend/.env
    labels:
      - "traefik.http.routes.frontend_app.rule=Host(`customAI.cloud`)"
    volumes:
      - ./apps/frontend:/app
      - /app/apps/frontend/node_modules
      - /app/apps/frontend/.next
    ports:
      - 3000:3000
    depends_on:
      - backend_app_prod